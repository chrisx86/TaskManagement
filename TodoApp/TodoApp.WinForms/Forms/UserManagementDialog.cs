#nullable enable
using TodoApp.Core.Models;
using TodoApp.Core.Services;

namespace TodoApp.WinForms.Forms;

public partial class UserManagementDialog : Form
{
    private readonly IUserService _userService;
    private bool _isUpdatingUI = false;
    private User? _selectedUser => lstUsers.SelectedItem as User;

    public UserManagementDialog(IUserService userService)
    {
        InitializeComponent();
        _userService = userService;

        // The event wiring is now handled by the Designer.cs file.
        // We no longer need to add them here manually.
    }

    private async void UserManagementDialog_Load(object? sender, EventArgs e)
    {
        cmbRole.DataSource = Enum.GetValues<UserRole>();
        await LoadUsersAsync();
        EnterCreateMode();
    }

    private async Task LoadUsersAsync()
    {
        try
        {
            var users = await _userService.GetAllUsersAsync();
            var bindingSource = new BindingSource { DataSource = users };
            lstUsers.DataSource = bindingSource;
            lstUsers.DisplayMember = "Username";
        }
        catch (Exception ex)
        {
            MessageBox.Show($"載入使用者列表時發生錯誤: {ex.Message}", "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    // --- Using the exact name generated by the designer ---
    private void lstUsers_SelectedIndexChanged(object? sender, EventArgs e)
    {
        if (_isUpdatingUI) return;
        if (_selectedUser != null)
        {
            EnterEditMode(_selectedUser);
        }
    }

    // --- Using the exact name generated by the designer ---
    private async void btnSaveUser_Click(object? sender, EventArgs e)
    {
        string username = txtUsername.Text.Trim();
        string password = txtPassword.Text;
        var role = (UserRole)cmbRole.SelectedItem;

        try
        {
            if (_selectedUser == null) // CREATE MODE
            {
                if (string.IsNullOrEmpty(username) || string.IsNullOrEmpty(password))
                {
                    MessageBox.Show("新增使用者時，使用者名稱和密碼為必填欄位。", "驗證錯誤", MessageBoxButtons.OK, MessageBoxIcon.Warning);
                    return;
                }

                await _userService.CreateUserAsync(username, password, role);
                MessageBox.Show($"使用者 '{username}' 已成功建立。", "成功", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }
            else // EDIT MODE
            {
                bool passwordChanged = false;
                if (!string.IsNullOrWhiteSpace(password))
                {
                    passwordChanged = await _userService.ResetPasswordAsync(_selectedUser.Id, password);
                }

                string successMessage = passwordChanged ? "密碼已成功重設。" : "使用者資訊已更新（無變更）。";
                MessageBox.Show(successMessage, "成功", MessageBoxButtons.OK, MessageBoxIcon.Information);
            }

            await LoadUsersAsync();
            EnterCreateMode();
        }
        catch (Exception ex)
        {
            MessageBox.Show($"儲存使用者時發生錯誤: {ex.Message}", "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    // --- Using the exact name generated by the designer ---
    private async void btnDeleteUser_Click(object? sender, EventArgs e)
    {
        if (_selectedUser == null)
        {
            MessageBox.Show("請先從左側列表選擇一個要刪除的使用者。", "提示", MessageBoxButtons.OK, MessageBoxIcon.Information);
            return;
        }

        if (_selectedUser.Username.Equals("admin", StringComparison.OrdinalIgnoreCase))
        {
            MessageBox.Show("不能刪除預設的 admin 帳號。", "操作不允許", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            return;
        }

        var confirmResult = MessageBox.Show($"您確定要永久刪除使用者 '{_selectedUser.Username}' 嗎？", "確認刪除", MessageBoxButtons.YesNo, MessageBoxIcon.Warning);
        if (confirmResult != DialogResult.Yes) return;

        try
        {
            var success = await _userService.DeleteUserAsync(_selectedUser.Id);
            if (success)
            {
                MessageBox.Show("使用者已成功刪除。", "成功", MessageBoxButtons.OK, MessageBoxIcon.Information);
                await LoadUsersAsync();
                EnterCreateMode();
            }
            else
            {
                MessageBox.Show("找不到該使用者，可能已被他人刪除。", "操作失敗", MessageBoxButtons.OK, MessageBoxIcon.Warning);
            }
        }
        catch (Exception ex)
        {
            MessageBox.Show($"刪除使用者時發生錯誤: {ex.Message}", "錯誤", MessageBoxButtons.OK, MessageBoxIcon.Error);
        }
    }

    // --- Using the exact name generated by the designer ---
    private void btnClear_Click(object? sender, EventArgs e)
    {
        EnterCreateMode();
    }

    // --- Using the exact name generated by the designer ---
    private void btnClose_Click(object? sender, EventArgs e)
    {
        this.Close();
    }

    // Note: The btnResetPassword_Click is intentionally omitted as we merged its functionality.

    private void EnterCreateMode()
    {
        _isUpdatingUI = true;
        lstUsers.ClearSelected();
        txtUsername.Clear();
        txtPassword.Clear();
        cmbRole.SelectedItem = UserRole.User;
        txtUsername.ReadOnly = false;
        grpUserDetails.Text = "新增使用者";
        lblPassword.Text = "密碼(&P):";
        btnDeleteUser.Enabled = false;
        _isUpdatingUI = false;
        txtUsername.Focus();
    }

    private void EnterEditMode(User user)
    {
        _isUpdatingUI = true;
        txtUsername.Text = user.Username;
        txtPassword.Clear();
        cmbRole.SelectedItem = user.Role;
        txtUsername.ReadOnly = true;
        grpUserDetails.Text = $"編輯使用者: {user.Username}";
        lblPassword.Text = "新密碼(&P):";
        btnDeleteUser.Enabled = true;
        _isUpdatingUI = false;
    }
}